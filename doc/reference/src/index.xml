<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!ENTITY preface SYSTEM "preface.xml">
<!ENTITY codeconfig-context SYSTEM "codeconfig-context.xml">
<!ENTITY attribute-reference SYSTEM "attribute-reference.xml">
<!ENTITY sample-apps SYSTEM "sample-apps.xml">
<!ENTITY further-reading SYSTEM "further-reading.xml">
<!ENTITY migration-example SYSTEM "migration-example.xml">
]>
<book version="5.0" xml:lang="en" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://docbook.org/ns/docbook/xi"
      xmlns:ns5="http://www.w3.org/1998/Math/MathML"
      xmlns:ns4="http://www.w3.org/2000/svg"
      xmlns:ns3="http://www.w3.org/1999/xhtml"
      xmlns:ns="http://docbook.org/ns/docbook">
  <bookinfo>
    <title>Spring CodeConfig - Reference Documentation</title>

    <releaseinfo>2.0.0</releaseinfo>

    <authorgroup>
      <author>
        <firstname>Stephen</firstname>

        <surname>Bohlen</surname>
      </author>

      <author>
        <firstname>Mark</firstname>

        <surname>Pollack</surname>
      </author>
    </authorgroup>

    <legalnotice>
      <para>Copies of this document may be made for your own use and for
      distribution to others, provided that you do not charge any fee for such
      copies and further provided that each copy contains this Copyright
      Notice, whether distributed in print or electronically.</para>
    </legalnotice>
  </bookinfo>

  <toc />

  &preface;

  <part xml:id="introduction">
    <title>Introduction</title>

    <partintro>
      <para>In this reference document, weâ€™ll explore the newest addition to
      the configuration story for the Spring.NET Dependency Injection
      container: code-based configuration, or simply CodeConfig, intended to
      begin to address many of the shortcomings of the XML-based configuration
      approach.</para>

      <para>At the core of Spring.NET is a powerful and flexible dependency
      injection container, offering object assembly and construction services
      atop which the remainder of the Spring.NET Framework is based.
      Historically, the primary manner of configuring this dependency
      injection container has been XML configuration files. Object
      definitions, essentially recipes to be used by the container when
      constructing objects of various types, are expressed in XML and then
      parsed and interpreted by the container as it is initialized at
      run-time.</para>

      <para>While there are several positive aspects to expressing
      configuration metadata in XML files, there are also many problems with
      this approach including the verbosity of XML and its heavy dependence on
      string-literals which are both prone to typing errors and unusually
      resistant to most modern refactoring tools in use today. The CodeConfig
      approach removes these problems by providing a type safe, code-based,
      approach to dependency injection. It keeps the configuration metadatda
      external to your class so your class can be a POCO, free of any DI
      related annotations.</para>
    </partintro>

    &migration-example;
  </part>

  <part xml:id="reference">
    <title>Reference</title>

    <partintro>
      <para>This part of the reference documentation details the various
      components that comprise Spring CodeConfig.</para>
    </partintro>

    &codeconfig-context;

    &attribute-reference;

    &sample-apps;
  </part>
</book>
